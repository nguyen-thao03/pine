import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/services.dart';
import 'package:get/get.dart';
import 'package:pine_admin_panel/features/shop/models/order_model.dart';
import '../../features/shop/controllers/dashboard/notification_controller.dart';
import '../../utils/exceptions/firebase_exceptions.dart';
import '../../utils/exceptions/format_exceptions.dart';
import '../../utils/exceptions/platform_exceptions.dart';

class OrderRepository extends GetxController {
  static OrderRepository get instance => Get.find();

  final FirebaseFirestore _db = FirebaseFirestore.instance;

  final NotificationController _notificationController = Get.put(NotificationController());

  // L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
  Future<List<OrderModel>> getAllOrders() async {
    final userId = FirebaseAuth.instance.currentUser?.uid;
    if (userId == null) return [];

    try {
      final result = await _db
          .collection("Users")
          .doc(userId)
          .collection("Orders")
          .orderBy('orderDate', descending: true)
          .get();
      return result.docs.map((querySnapshot) => OrderModel.fromSnapshot(querySnapshot)).toList();
    } catch (e) {
      print("üö® L·ªói khi l·∫•y ƒë∆°n h√†ng: $e");
      return [];
    }
  }

  // L·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng c·ªßa t·∫•t c·∫£ ng∆∞·ªùi d√πng
  Future<List<OrderModel>> getAllOrdersForAllUsers() async {
    List<OrderModel> allOrders = [];

    try {
      // L·∫•y t·∫•t c·∫£ user
      final users = await _db.collection("Users").get();

      for (var user in users.docs) {
        final userId = user.id;

        // L·∫•y t·∫•t c·∫£ orders c·ªßa user ƒë√≥
        final orders = await _db
            .collection("Users")
            .doc(userId)
            .collection("Orders")
            .orderBy('orderDate', descending: true)
            .get();

        final orderList = orders.docs.map((querySnapshot) => OrderModel.fromSnapshot(querySnapshot)).toList();

        allOrders.addAll(orderList);
      }

      return allOrders;
    } catch (e) {
      print("üö® L·ªói khi l·∫•y t·∫•t c·∫£ ƒë∆°n h√†ng: $e");
      return [];
    }
  }

  // H√†m th√™m ƒë∆°n h√†ng v√† g·ª≠i th√¥ng b√°o khi c√≥ ƒë∆°n h√†ng m·ªõi
  Future<void> addOrder(OrderModel order) async {
    try {
      // L∆∞u ƒë∆°n h√†ng v√†o Firestore
      await _db.collection("Users").doc(order.userId).collection("Orders").add(order.toJson());

      // L∆∞u th√¥ng b√°o v√†o Firestore (Collection "Notifications")
      await _db.collection("Notifications").add({
        'title': 'ƒê∆°n h√†ng m·ªõi',
        'message': 'Kh√°ch h√†ng ${order.userId} ƒë√£ ƒë·∫∑t m·ªôt ƒë∆°n h√†ng m·ªõi!',
        'isRead': false,
        'timestamp': FieldValue.serverTimestamp(), // Th·ªùi gian server
      });

      // C·∫≠p nh·∫≠t th√¥ng b√°o m·ªõi trong ·ª©ng d·ª•ng
      _notificationController.addNotification(
        'ƒê∆°n h√†ng m·ªõi',
        'Kh√°ch h√†ng ${order.userId} ƒë√£ ƒë·∫∑t m·ªôt ƒë∆°n h√†ng m·ªõi!',
      );
    } on FirebaseException catch (e) {
      throw PFirebaseException(e.code).message;
    } on FormatException catch (_) {
      throw const PFormatException();
    } on PlatformException catch (e) {
      throw PPlatformException(e.code).message;
    } catch (e) {
      throw 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i';
    }
  }

  // C·∫≠p nh·∫≠t gi√° tr·ªã c·ª• th·ªÉ cho ƒë∆°n h√†ng
  Future<void> updateOrderSpecificValue(String userId, String orderId, Map<String, dynamic> data) async {
    try {
      if (userId.isEmpty || orderId.isEmpty) {
        throw '‚ö†Ô∏è User ID ho·∫∑c Order ID kh√¥ng h·ª£p l·ªá!';
      }

      print("üî• Firestore Update: User ID: $userId, Order ID: $orderId, Data: $data");

      // C·∫≠p nh·∫≠t th√¥ng tin v√†o Firestore
      await _db.collection("Users").doc(userId).collection("Orders").doc(orderId).update(data);
    } on FirebaseException catch (e) {
      throw 'Firebase Error: ${e.code}';
    } catch (e) {
      throw 'L·ªói kh√¥ng x√°c ƒë·ªãnh khi c·∫≠p nh·∫≠t ƒë∆°n h√†ng! L·ªói: $e';
    }
  }

  Future<void> deleteOrder(String userId, String orderId) async {
    try {
      // ƒê·∫£m b·∫£o b·∫°n x√≥a ƒë√∫ng ƒë∆°n h√†ng trong collection Orders c·ªßa user
      await _db
          .collection("Users") // Collection ch√≠nh c·ªßa user
          .doc(userId) // ID c·ªßa ng∆∞·ªùi d√πng
          .collection("Orders") // Collection con ch·ª©a c√°c ƒë∆°n h√†ng
          .doc(orderId) // ID ƒë∆°n h√†ng c·∫ßn x√≥a
          .delete(); // X√≥a document c·ªßa ƒë∆°n h√†ng

      print("üöÄ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi Firestore!");
    } on FirebaseException catch (e) {
      throw PFirebaseException(e.code).message;
    } on FormatException catch (_) {
      throw const PFormatException();
    } on PlatformException catch (e) {
      throw PPlatformException(e.code).message;
    } catch (e) {
      throw 'C√≥ l·ªói khi x√≥a ƒë∆°n h√†ng';
    }
  }

}
